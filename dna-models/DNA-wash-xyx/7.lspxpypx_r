// DNA Stack model

ctmc

// Parameters for stochastic rate constants
const double k_a = 0.2214e-5; 
const double k_bc = 0.2214e-5; 
const int N = 50;
const double Inv = 27100/N;


// Species start
module s
s : [0..N] init 0;
endmodule



// Species linker - start
module ls
ls : [0..N] init 0;
// Reactant
endmodule


// Species push
module p 
p : [0..N] init 0; 
endmodule


// Species linker - start - push
module lsp 
lsp : [0..N] init 0;
endmodule


// Species dataX
module x
x : [0..N] init 0; 
// Reactant
[lspxpyp_x] x > 0 -> x*Inv : (x'=x-1);
[r_x] x > 0 -> x*Inv : (x'=x-1);
endmodule


// Species linker - start - push - dataX
module lspx
lspx : [0..N] init 0;
endmodule


// Species linker - start - sigma polymer
module lsSG
lsSG : [0..N] init 0;
endmodule


// Species push-sigma polymer 
module pSG 
pSG : [0..N] init 0;
endmodule


// Species data-sigma polymer
module wSG 
wSG : [0..N] init 0;
endmodule


// Species linker - start - push - dataX - push
module lspxp
lspxp : [0..N] init 0;
endmodule


// Species dataX
module y
y : [0..N] init 0; 
endmodule



// Species linker - start - push - dataX - push - dataY
module lspxpy
lspxpy : [0..N] init 0;
endmodule

// Species linker - start - push - dataX - push - dataY - push
module lspxpyp
lspxpyp : [0..N] init 0;
// Reactant
[lspxpyp_x] lspxpyp> 0 -> lspxpyp*Inv : (lspxpyp'=lspxpyp-1);
// Production
[lspxpypx_r] lspxpyp < N -> 1 : (lspxpyp'=lspxpyp+1);
endmodule


// Species linker - start - push - dataX - push - dataY - push - dataX
module lspxpypx
lspxpypx : [0..N] init 0;
// Reactant
[lspxpypx_r] lspxpypx> 0 -> lspxpypx*Inv : (lspxpypx'=lspxpypx-1);
// Production
[lspxpyp_x] lspxpypx < N -> 1 : (lspxpypx'=lspxpypx+1);
endmodule
 

// Species read
module r
r : [0..N] init 0;
// Reactant
[r_x] r > 0 -> r*Inv : (r'=r-1);
[lspxpypx_r] r > 0 -> r*Inv : (r'=r-1);
endmodule


// Species read - dataX
module rx
rx : [0..N] init 0;
// Production
//[lspxpypx_r] ry < N -> 1 : (ry'=ry+1);
endmodule


// Reaction rates
module reaction_rates
[lspxpypx_r] lspxpypx*r > 0 -> k_a / Inv : true;
[r_x] r*x > 0 -> k_a / Inv : true;
[lspxpyp_x] lspxpyp*x>0 -> k_bc / Inv : true;
endmodule

